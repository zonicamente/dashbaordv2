/**
 * @license
 * Copyright (c) 2022-2024 Open Text.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/// <reference types="node" />
/// <reference types="node" />
import { TransformOptions } from 'stream';
import { Mode, BackendMessage } from './backend-messages';
export type Packet = {
    code: number;
    packet: Buffer;
};
type StreamOptions = TransformOptions & {
    mode: Mode;
};
export type MessageCallback = (msg: BackendMessage) => void;
export declare class Parser {
    private buffer;
    private bufferLength;
    private bufferOffset;
    private reader;
    private mode;
    constructor(opts?: StreamOptions);
    parse(buffer: Buffer, callback: MessageCallback): void;
    private mergeBuffer;
    private handlePacket;
    private parseReadyForQueryMessage;
    private parseCommandCompleteMessage;
    private parseVerifyFilesMessage;
    private parseWriteFileMessage;
    private parseCopyInResponseMessage;
    private parseLoadFileMessage;
    private parseRowDescriptionMessage;
    private parseField;
    private parseParameterDescriptionMessage;
    private parseParameter;
    private parseCommandDescriptionMessage;
    private parseDataRowMessage;
    private parseParameterStatusMessage;
    private parseBackendKeyData;
    parseAuthenticationResponse(offset: number, length: number, bytes: Buffer): any;
    private parseErrorMessage;
}
export {};
