"use strict";
/**
 * @license
 * Copyright (c) 2022-2024 Open Text.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WriteFileMessage = exports.VerifyFilesMessage = exports.NoticeMessage = exports.DataRowMessage = exports.CommandCompleteMessage = exports.ReadyForQueryMessage = exports.BackendKeyDataMessage = exports.AuthenticationSHA512Password = exports.AuthenticationMD5Password = exports.CommandDescriptionMessage = exports.ParameterStatusMessage = exports.ParameterDescriptionMessage = exports.CopyInResponseMessage = exports.LoadFileMessage = exports.Parameter = exports.RowDescriptionMessage = exports.Field = exports.DatabaseError = exports.EndOfBatchResponse = exports.copyDone = exports.emptyQuery = exports.portalSuspended = exports.noData = exports.closeComplete = exports.bindComplete = exports.parseComplete = void 0;
exports.parseComplete = {
    name: 'parseComplete',
    length: 5,
};
exports.bindComplete = {
    name: 'bindComplete',
    length: 5,
};
exports.closeComplete = {
    name: 'closeComplete',
    length: 5,
};
exports.noData = {
    name: 'noData',
    length: 5,
};
exports.portalSuspended = {
    name: 'portalSuspended',
    length: 5,
};
exports.emptyQuery = {
    name: 'emptyQuery',
    length: 5,
};
exports.copyDone = {
    name: 'copyDone',
    length: 5,
};
exports.EndOfBatchResponse = {
    name: 'endOfBatchResponse',
    length: 5
};
class DatabaseError extends Error {
    constructor(message, length, name) {
        super(message);
        this.length = length;
        this.name = name;
    }
}
exports.DatabaseError = DatabaseError;
class Field {
    constructor(name, tableID, schemaName, tableName, columnID, 
    //public readonly parentTypeID: number, //breadcrumb for complex types
    //public readonly isNonNative: number,  //breadcrumb for non native types
    dataTypeID, dataTypeSize, allowsNull, isIdentity, dataTypeModifier, format) {
        this.name = name;
        this.tableID = tableID;
        this.schemaName = schemaName;
        this.tableName = tableName;
        this.columnID = columnID;
        this.dataTypeID = dataTypeID;
        this.dataTypeSize = dataTypeSize;
        this.allowsNull = allowsNull;
        this.isIdentity = isIdentity;
        this.dataTypeModifier = dataTypeModifier;
        this.format = format;
    }
}
exports.Field = Field;
class RowDescriptionMessage {
    constructor(length, fieldCount) {
        this.length = length;
        this.fieldCount = fieldCount;
        this.name = 'rowDescription';
        this.fields = new Array(this.fieldCount);
    }
}
exports.RowDescriptionMessage = RowDescriptionMessage;
class Parameter {
    constructor(isNonNative, oid, // for non native types, the oid becomes the index into the type mapping pool
    typemod, hasNotNullConstraint) {
        this.isNonNative = isNonNative;
        this.oid = oid;
        this.typemod = typemod;
        this.hasNotNullConstraint = hasNotNullConstraint;
    }
}
exports.Parameter = Parameter;
class LoadFileMessage {
    constructor(length, fileName) {
        this.length = length;
        this.fileName = fileName;
        this.name = 'loadFile';
    }
}
exports.LoadFileMessage = LoadFileMessage;
class CopyInResponseMessage {
    constructor(length, isBinary, numColumns) {
        this.length = length;
        this.isBinary = isBinary;
        this.numColumns = numColumns;
        this.name = 'copyInResponse';
        this.columnFormats = new Array(this.numColumns);
    }
}
exports.CopyInResponseMessage = CopyInResponseMessage;
class ParameterDescriptionMessage {
    constructor(length, parameterCount) {
        this.length = length;
        this.parameterCount = parameterCount;
        this.name = 'parameterDescription';
        this.parameters = new Array(this.parameterCount);
    }
}
exports.ParameterDescriptionMessage = ParameterDescriptionMessage;
class ParameterStatusMessage {
    constructor(length, parameterName, parameterValue) {
        this.length = length;
        this.parameterName = parameterName;
        this.parameterValue = parameterValue;
        this.name = 'parameterStatus';
    }
}
exports.ParameterStatusMessage = ParameterStatusMessage;
class CommandDescriptionMessage {
    constructor(length, tag, convertedToCopy, convertedStatement) {
        this.length = length;
        this.tag = tag;
        this.convertedToCopy = convertedToCopy;
        this.convertedStatement = convertedStatement;
        this.name = 'commandDescription';
    }
}
exports.CommandDescriptionMessage = CommandDescriptionMessage;
class AuthenticationMD5Password {
    constructor(length, salt) {
        this.length = length;
        this.salt = salt;
        this.name = 'authenticationMD5Password';
    }
}
exports.AuthenticationMD5Password = AuthenticationMD5Password;
class AuthenticationSHA512Password {
    constructor(length, salt, userSalt) {
        this.length = length;
        this.salt = salt;
        this.userSalt = userSalt;
        this.name = 'authenticationSHA512Password';
    }
}
exports.AuthenticationSHA512Password = AuthenticationSHA512Password;
class BackendKeyDataMessage {
    constructor(length, processID, secretKey) {
        this.length = length;
        this.processID = processID;
        this.secretKey = secretKey;
        this.name = 'backendKeyData';
    }
}
exports.BackendKeyDataMessage = BackendKeyDataMessage;
class ReadyForQueryMessage {
    constructor(length, status) {
        this.length = length;
        this.status = status;
        this.name = 'readyForQuery';
    }
}
exports.ReadyForQueryMessage = ReadyForQueryMessage;
class CommandCompleteMessage {
    constructor(length, text) {
        this.length = length;
        this.text = text;
        this.name = 'commandComplete';
    }
}
exports.CommandCompleteMessage = CommandCompleteMessage;
class DataRowMessage {
    constructor(length, fields) {
        this.length = length;
        this.fields = fields;
        this.name = 'dataRow';
        this.fieldCount = fields.length;
    }
}
exports.DataRowMessage = DataRowMessage;
class NoticeMessage {
    constructor(length, message) {
        this.length = length;
        this.message = message;
        this.name = 'notice';
    }
}
exports.NoticeMessage = NoticeMessage;
class VerifyFilesMessage {
    constructor(length, numFiles, files, rejectFile, exceptionFile) {
        this.length = length;
        this.numFiles = numFiles;
        this.files = files;
        this.rejectFile = rejectFile;
        this.exceptionFile = exceptionFile;
        this.name = 'verifyFiles';
        // shallow copy the fileNames, or null for copy from local stdin
        this.fileNames = files !== null ? [...files] : null;
    }
}
exports.VerifyFilesMessage = VerifyFilesMessage;
class WriteFileMessage {
    constructor(length, fileName, fileLength, fileContents) {
        this.length = length;
        this.fileName = fileName;
        this.fileLength = fileLength;
        this.fileContents = fileContents;
        this.name = 'writeFile';
    }
}
exports.WriteFileMessage = WriteFileMessage;
//# sourceMappingURL=backend-messages.js.map