/**
 * @license
 * Copyright (c) 2022-2024 Open Text.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/// <reference types="node" />
export type Mode = 'text' | 'binary';
export type MessageName = 'parseComplete' | 'bindComplete' | 'closeComplete' | 'noData' | 'portalSuspended' | 'emptyQuery' | 'copyDone' | 'rowDescription' | 'parameterDescription' | 'parameterStatus' | 'commandDescription' | 'backendKeyData' | 'readyForQuery' | 'commandComplete' | 'dataRow' | 'copyInResponse' | 'loadFile' | 'authenticationOk' | 'authenticationMD5Password' | 'authenticationSHA512Password' | 'authenticationCleartextPassword' | 'authenticationOAuthPassword' | 'error' | 'notice' | 'verifyFiles' | 'endOfBatchResponse' | 'writeFile';
export interface BackendMessage {
    name: MessageName;
    length: number;
}
export declare const parseComplete: BackendMessage;
export declare const bindComplete: BackendMessage;
export declare const closeComplete: BackendMessage;
export declare const noData: BackendMessage;
export declare const portalSuspended: BackendMessage;
export declare const emptyQuery: BackendMessage;
export declare const copyDone: BackendMessage;
export declare const EndOfBatchResponse: BackendMessage;
interface NoticeOrError {
    message: string | undefined;
    severity: string | undefined;
    code: string | undefined;
    detail: string | undefined;
    hint: string | undefined;
    position: string | undefined;
    internalPosition: string | undefined;
    internalQuery: string | undefined;
    where: string | undefined;
    schema: string | undefined;
    table: string | undefined;
    column: string | undefined;
    dataType: string | undefined;
    constraint: string | undefined;
    file: string | undefined;
    line: string | undefined;
    routine: string | undefined;
}
export declare class DatabaseError extends Error implements NoticeOrError {
    readonly length: number;
    readonly name: MessageName;
    severity: string | undefined;
    code: string | undefined;
    detail: string | undefined;
    hint: string | undefined;
    position: string | undefined;
    internalPosition: string | undefined;
    internalQuery: string | undefined;
    where: string | undefined;
    schema: string | undefined;
    table: string | undefined;
    column: string | undefined;
    dataType: string | undefined;
    constraint: string | undefined;
    file: string | undefined;
    line: string | undefined;
    routine: string | undefined;
    constructor(message: string, length: number, name: MessageName);
}
export declare class Field {
    readonly name: string;
    readonly tableID: bigint;
    readonly schemaName: string;
    readonly tableName: string;
    readonly columnID: number;
    readonly dataTypeID: number;
    readonly dataTypeSize: number;
    readonly allowsNull: number;
    readonly isIdentity: number;
    readonly dataTypeModifier: number;
    readonly format: Mode;
    constructor(name: string, tableID: bigint, schemaName: string, tableName: string, columnID: number, dataTypeID: number, dataTypeSize: number, allowsNull: number, isIdentity: number, dataTypeModifier: number, format: Mode);
}
export declare class RowDescriptionMessage {
    readonly length: number;
    readonly fieldCount: number;
    readonly name: MessageName;
    readonly fields: Field[];
    constructor(length: number, fieldCount: number);
}
export declare class Parameter {
    readonly isNonNative: boolean;
    readonly oid: number;
    readonly typemod: number;
    readonly hasNotNullConstraint: number;
    constructor(isNonNative: boolean, oid: number, // for non native types, the oid becomes the index into the type mapping pool
    typemod: number, hasNotNullConstraint: number);
}
export declare class LoadFileMessage {
    readonly length: number;
    readonly fileName: string;
    readonly name: MessageName;
    constructor(length: number, fileName: string);
}
export declare class CopyInResponseMessage {
    readonly length: number;
    readonly isBinary: boolean;
    readonly numColumns: number;
    readonly name: MessageName;
    readonly columnFormats: number[];
    constructor(length: number, isBinary: boolean, numColumns: number);
}
export declare class ParameterDescriptionMessage {
    readonly length: number;
    readonly parameterCount: number;
    readonly name: MessageName;
    readonly parameters: Parameter[];
    constructor(length: number, parameterCount: number);
}
export declare class ParameterStatusMessage {
    readonly length: number;
    readonly parameterName: string;
    readonly parameterValue: string;
    readonly name: MessageName;
    constructor(length: number, parameterName: string, parameterValue: string);
}
export declare class CommandDescriptionMessage {
    readonly length: number;
    readonly tag: string;
    readonly convertedToCopy: number;
    readonly convertedStatement: string;
    readonly name: MessageName;
    constructor(length: number, tag: string, convertedToCopy: number, convertedStatement: string);
}
export declare class AuthenticationMD5Password implements BackendMessage {
    readonly length: number;
    readonly salt: Buffer;
    readonly name: MessageName;
    constructor(length: number, salt: Buffer);
}
export declare class AuthenticationSHA512Password implements BackendMessage {
    readonly length: number;
    readonly salt: Buffer;
    readonly userSalt: Buffer;
    readonly name: MessageName;
    constructor(length: number, salt: Buffer, userSalt: Buffer);
}
export declare class BackendKeyDataMessage {
    readonly length: number;
    readonly processID: number;
    readonly secretKey: number;
    readonly name: MessageName;
    constructor(length: number, processID: number, secretKey: number);
}
export declare class ReadyForQueryMessage {
    readonly length: number;
    readonly status: string;
    readonly name: MessageName;
    constructor(length: number, status: string);
}
export declare class CommandCompleteMessage {
    readonly length: number;
    readonly text: string;
    readonly name: MessageName;
    constructor(length: number, text: string);
}
export declare class DataRowMessage {
    length: number;
    fields: any[];
    readonly fieldCount: number;
    readonly name: MessageName;
    constructor(length: number, fields: any[]);
}
export declare class NoticeMessage implements BackendMessage, NoticeOrError {
    readonly length: number;
    readonly message: string | undefined;
    constructor(length: number, message: string | undefined);
    readonly name = "notice";
    severity: string | undefined;
    code: string | undefined;
    detail: string | undefined;
    hint: string | undefined;
    position: string | undefined;
    internalPosition: string | undefined;
    internalQuery: string | undefined;
    where: string | undefined;
    schema: string | undefined;
    table: string | undefined;
    column: string | undefined;
    dataType: string | undefined;
    constraint: string | undefined;
    file: string | undefined;
    line: string | undefined;
    routine: string | undefined;
}
export declare class VerifyFilesMessage {
    readonly length: number;
    numFiles: number;
    files: string[] | null;
    readonly rejectFile: string;
    readonly exceptionFile: string;
    readonly name: MessageName;
    readonly fileNames: string[] | null;
    constructor(length: number, numFiles: number, files: string[] | null, rejectFile: string, exceptionFile: string);
}
export declare class WriteFileMessage {
    readonly length: number;
    fileName: string;
    fileLength: number;
    fileContents: string | bigint[];
    readonly name: MessageName;
    constructor(length: number, fileName: string, fileLength: number, fileContents: string | bigint[]);
}
export {};
